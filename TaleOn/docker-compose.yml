version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: taleon-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: taleon
    volumes:
      - mongodb_data:/data/db
      - ./taleon-backend/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - taleon-network

  # Backend API
  backend:
    build: ./taleon-backend
    container_name: taleon-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/taleon?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-your_super_secure_jwt_secret_key_here_minimum_32_characters}
      - SESSION_SECRET=${SESSION_SECRET:-your_super_secure_session_secret_here_minimum_32_characters}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - FROM_NAME=${FROM_NAME:-TaleOn}
      - FROM_EMAIL=${FROM_EMAIL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
    networks:
      - taleon-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build: ./taleon
    container_name: taleon-frontend
    restart: unless-stopped
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:5000}
      - VITE_SOCKET_URL=${VITE_SOCKET_URL:-http://localhost:5000}
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - taleon-network

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: taleon-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - taleon-network
    profiles:
      - production

volumes:
  mongodb_data:

networks:
  taleon-network:
    driver: bridge


